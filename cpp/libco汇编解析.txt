; 64 bit
; address     registers    offset
;   low  | regs[0]:  r15 | 0
;        | regs[1]:  r14 | 8
;        | regs[2]:  r13 | 16
;        | regs[3]:  r12 | 24
;        | regs[4]:  r9  | 32
;        | regs[5]:  r8  | 40
;        | regs[6]:  rbp | 48
;        | regs[7]:  rdi | 56
;        | regs[8]:  rsi | 64
;        | regs[9]:  ret | 72    //ret func addr !!!
;        | regs[10]: rdx | 80 
;        | regs[11]: rcx | 88
;        | regs[12]: rbx | 96
;   hig  | regs[13]: rsp | 104

 
; =================================================
; 保存所有常用寄存器的值，返回地址是通过call指令压入的
leaq (%rsp),%rax
movq %rax, 104(%rdi) ; save rsp
movq %rbx, 96(%rdi)  ; save rbx
movq %rcx, 88(%rdi)  ; save rcx
movq %rdx, 80(%rdi)  ; save rdx
movq 0(%rax), %rax   ; 解引用，拿到sp指向的内存中的值，也就是返回地址的值
movq %rax, 72(%rdi)  ; save return address
movq %rsi, 64(%rdi)  ; save rsi
movq %rdi, 56(%rdi)  ; save rdi
movq %rbp, 48(%rdi)  ; save rbp
movq %r8, 40(%rdi)
movq %r9, 32(%rdi)
movq %r12, 24(%rdi)
movq %r13, 16(%rdi)
movq %r14, 8(%rdi)
movq %r15, (%rdi)
xorq %rax, %rax      # clear


; =================================================
; 保存完当前上下文，开始导入目标上下文

movq 48(%rsi), %rbp ; resume rbp
movq 104(%rsi), %rsp ; resume rsp
; 设置完sp和bp之后，当前的状态已经转移到另一个栈上了

movq (%rsi), %r15
movq 8(%rsi), %r14
movq 16(%rsi), %r13
movq 24(%rsi), %r12
movq 32(%rsi), %r9
movq 40(%rsi), %r8
movq 56(%rsi), %rdi
movq 80(%rsi), %rdx
movq 88(%rsi), %rcx
movq 96(%rsi), %rbx

; 将sp往上偏移8个字节，然后再push返回地址回到原来位置
leaq 8(%rsp), %rsp
pushq 72(%rsi)

movq 64(%rsi), %rsi
ret